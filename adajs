private setupDropdowns(): void {
  const toggle = document.querySelector<HTMLElement>(
    `.${this.calculatorID ?? ''}-change-card-toggle`
  );
  const dropdown = document.querySelector<HTMLElement>(
    `.${this.calculatorID ?? ''}-change-card-dropdown`
  );
  const dropdownItems = dropdown?.querySelectorAll<HTMLElement>(
    `.${this.calculatorID ?? ''}-change-card-dropdown-list`
  );

  if (!toggle || !dropdown || !dropdownItems) return;

  const selectedCardHeading = document
    .querySelector(
      `.${this.calculatorID ?? ''}-card-calculator-main-div .selected-card-details .uc-heading .uc-heading_headline p`
    )?.textContent?.trim();

  dropdownItems.forEach((item) => {
    const dropdownTitle = item.querySelector(
      `.${this.calculatorID ?? ''}-change-dropdown-title`
    )?.textContent?.trim();
    const isSelected = dropdownTitle === selectedCardHeading;
    item.setAttribute('aria-selected', isSelected.toString());
    if (isSelected) {
      item.querySelector(
        `.${this.calculatorID ?? ''}-change-dropdown-title`
      )?.classList.add('uc-icon-action-checkmark');
    } else {
      item.querySelector(
        `.${this.calculatorID ?? ''}-change-dropdown-title`
      )?.classList.remove('uc-icon-action-checkmark');
    }
  });

  // Keyboard & click handler
  toggle.addEventListener('click', () => {
    const expanded = dropdown.hasAttribute('hidden') === false;
    dropdown.toggleAttribute('hidden');
    toggle.setAttribute('aria-expanded', (!expanded).toString());
    if (!expanded) {
      dropdownItems[0]?.focus();
    }
  });

  toggle.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ' || e.code === 'Space') {
      e.preventDefault();
      toggle.click();
    }
  });

  dropdownItems.forEach((item, index) => {
    item.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        dropdownItems[Math.min(index + 1, dropdownItems.length - 1)].focus();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        dropdownItems[Math.max(index - 1, 0)].focus();
      } else if (e.key === 'Escape') {
        dropdown.setAttribute('hidden', '');
        toggle.setAttribute('aria-expanded', 'false');
        toggle.focus();
      } else if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        item.click();
      }
    });

    item.addEventListener('click', () => {
      dropdownItems.forEach((el) => {
        el.setAttribute('aria-selected', 'false');
        el.classList.remove('selected');
        el.querySelector(
          `.${this.calculatorID ?? ''}-change-dropdown-title`
        )?.classList.remove('uc-icon-action-checkmark');
      });

      item.setAttribute('aria-selected', 'true');
      item.classList.add('selected');
      item.querySelector(
        `.${this.calculatorID ?? ''}-change-dropdown-title`
      )?.classList.add('uc-icon-action-checkmark');

      const title = item.querySelector(
        `.${this.calculatorID ?? ''}-change-dropdown-title`
      )?.textContent?.trim();
      const xfpath = item.dataset.xfpath;
      const headImage = item.dataset.headimage;
      const headTitle = item.dataset.headtitle;

      if (title && xfpath) {
        let path = window.location.pathname;
        if (path.endsWith('.html')) path = path.slice(0, -5);
        const fetchurl = `${path}.cardsdetails.json?cardXFPath=${xfpath}`;
        fetch(fetchurl)
          .then((response) => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
          })
          .then((data) => {
            this.updateImgTitlecard(headImage, headTitle);
            this.updateUIWithCardData(data);
          })
          .catch((error) => {
            console.error('Error fetching card data:', error);
          });
      }

      dropdown.setAttribute('hidden', '');
      toggle.setAttribute('aria-expanded', 'false');
      toggle.focus();

      this.redBox();
    });
  });
}
