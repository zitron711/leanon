private setupCustomDropdown(): void {
  let customToggle = document.querySelector(
    `.${this.calculatorID ?? ''}-custom-dropdown-toggle`
  ) as HTMLElement | null;

  const customDropdown = document.querySelector(
    `.${this.calculatorID ?? ''}-custom-dropdown-list`
  ) as HTMLElement | null;

  if (!customToggle || !customDropdown) return;

  const wrapper = customToggle.closest('.custom-dropdown-wrapper') as HTMLElement;
  const allOptions = customDropdown.querySelectorAll(
    `.${this.calculatorID ?? ''}-custom-dropdown-list-option`
  );

  // Set ARIA
  wrapper.setAttribute('role', 'combobox');
  wrapper.setAttribute('aria-haspopup', 'listbox');
  wrapper.setAttribute('aria-expanded', 'false');
  wrapper.setAttribute('aria-controls', `${this.calculatorID}-dropdown-list`);
  wrapper.setAttribute('tabindex', '0');

  customDropdown.setAttribute('role', 'listbox');
  customDropdown.setAttribute('id', `${this.calculatorID}-dropdown-list`);
  customDropdown.setAttribute('hidden', 'true');

  allOptions.forEach((option) => {
    option.setAttribute('role', 'option');
    option.setAttribute('tabindex', '-1');
  });

  // Highlight selected tier (on load)
  const selectedTier = customToggle.textContent?.trim().toLowerCase() ?? '';
  allOptions.forEach((option) => {
    const tierSpan = option.querySelector(
      `.${this.calculatorID ?? ''}-custom-dropdown-tier`
    );
    if (tierSpan?.textContent?.trim().toLowerCase() === selectedTier) {
      option.classList.add('uc-icon-action-checkmark');
    } else {
      option.classList.remove('uc-icon-action-checkmark');
    }
  });

  // Replace toggle to remove prior events
  const newToggle = customToggle.cloneNode(true) as HTMLElement;
  customToggle.parentNode?.replaceChild(newToggle, customToggle);
  customToggle = newToggle;

  // Toggle dropdown on click
  const toggleDropdown = (open: boolean) => {
    if (open) {
      customDropdown.classList.add('active');
      customDropdown.removeAttribute('hidden');
      wrapper.setAttribute('aria-expanded', 'true');
      customToggle.classList.add('hx-icon-interactive-caret-up');
      customToggle.classList.remove('hx-icon-interactive-caret-down');
      allOptions[0]?.focus();
    } else {
      customDropdown.classList.remove('active');
      customDropdown.setAttribute('hidden', 'true');
      wrapper.setAttribute('aria-expanded', 'false');
      customToggle.classList.remove('hx-icon-interactive-caret-up');
      customToggle.classList.add('hx-icon-interactive-caret-down');
    }
  };

  customToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    const isOpen = customDropdown.classList.contains('active');
    toggleDropdown(!isOpen);
  });

  wrapper.addEventListener('keydown', (e) => {
    const isOpen = customDropdown.classList.contains('active');

    switch (e.key) {
      case 'Enter':
      case ' ':
        e.preventDefault();
        toggleDropdown(!isOpen);
        break;
      case 'ArrowDown':
        e.preventDefault();
        if (!isOpen) toggleDropdown(true);
        else allOptions[0]?.focus();
        break;
      case 'Escape':
        toggleDropdown(false);
        wrapper.focus();
        break;
    }
  });

  allOptions.forEach((option, index) => {
    option.addEventListener('keydown', (e) => {
      const next = () => allOptions[(index + 1) % allOptions.length]?.focus();
      const prev = () => allOptions[(index - 1 + allOptions.length) % allOptions.length]?.focus();

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          next();
          break;
        case 'ArrowUp':
          e.preventDefault();
          prev();
          break;
        case 'Enter':
        case ' ':
          e.preventDefault();
          option.click();
          break;
        case 'Escape':
          toggleDropdown(false);
          wrapper.focus();
          break;
      }
    });

    option.addEventListener('click', () => {
      const tierName = option.querySelector(
        `.${this.calculatorID ?? ''}-custom-dropdown-tier`
      )?.textContent?.trim();

      if (tierName) {
        allOptions.forEach((opt) => opt.classList.remove('uc-icon-action-checkmark'));
        option.classList.add('uc-icon-action-checkmark');

        customToggle.textContent = tierName;
        this.removeRedbox(selectedTier);
        this.redBox();
        toggleDropdown(false);
        wrapper.focus();
      }
    });
  });

  // Close on outside click
  document.addEventListener('click', (e) => {
    if (
      !wrapper.contains(e.target as Node) &&
      !customDropdown.contains(e.target as Node)
    ) {
      toggleDropdown(false);
    }
  });
}
