private setupCustomDropdown(): void {
  const toggleSelector = `.${this.calculatorID}-custom-dropdown-toggle`;
  const dropdownSelector = `.${this.calculatorID}-custom-dropdown-list`;
  const optionSelector = `.${this.calculatorID}-custom-dropdown-list-option`;

  const toggle = document.querySelector<HTMLElement>(toggleSelector);
  const dropdown = document.querySelector<HTMLElement>(dropdownSelector);

  if (!toggle || !dropdown) return;

  const wrapper = toggle.closest<HTMLElement>(`.${this.calculatorID}-custom-dropdown-wrapper`);
  const options = Array.from(dropdown.querySelectorAll<HTMLElement>(optionSelector));

  if (!wrapper) return;

  // Set ARIA roles/attributes
  wrapper.setAttribute("role", "combobox");
  wrapper.setAttribute("aria-haspopup", "listbox");
  wrapper.setAttribute("aria-expanded", "false");
  wrapper.setAttribute("aria-controls", `${this.calculatorID}-dropdown-list`);
  wrapper.setAttribute("tabindex", "0");

  dropdown.setAttribute("role", "listbox");
  dropdown.setAttribute("id", `${this.calculatorID}-dropdown-list`);
  dropdown.hidden = true;

  options.forEach((option) => {
    option.setAttribute("role", "option");
    option.setAttribute("tabindex", "-1");
  });

  // Helper: open/close dropdown
  const toggleDropdown = (open: boolean) => {
    wrapper.setAttribute("aria-expanded", String(open));
    dropdown.hidden = !open;

    toggle.classList.toggle("hx-icon-interactive-caret-up", open);
    toggle.classList.toggle("hx-icon-interactive-caret-down", !open);

    if (open && options.length > 0) {
      options[0].focus();
    }
  };

  // Update selected state on click
  options.forEach((option) => {
    option.addEventListener("click", () => {
      const tierSpan = option.querySelector<HTMLElement>(
        `.${this.calculatorID}-custom-dropdown-tier`
      );
      const tierName = tierSpan?.textContent?.trim();

      if (tierName) {
        options.forEach((opt) =>
          opt.classList.remove("uc-icon-action-checkmark")
        );
        option.classList.add("uc-icon-action-checkmark");

        toggle.textContent = tierName;
        dropdown.hidden = true;
        wrapper.setAttribute("aria-expanded", "false");

        // Your functions
        this.removeRedbox(toggle.textContent?.trim().toLowerCase() || '');
        this.redBox();

        toggle.focus();
      }
    });

    option.addEventListener("keydown", (e: KeyboardEvent) => {
      const currentIndex = options.indexOf(option);
      if (e.key === "ArrowDown") {
        e.preventDefault();
        const next = options[(currentIndex + 1) % options.length];
        next?.focus();
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        const prev = options[(currentIndex - 1 + options.length) % options.length];
        prev?.focus();
      } else if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        option.click();
      } else if (e.key === "Escape") {
        toggleDropdown(false);
        wrapper.focus();
      }
    });
  });

  // Toggle on click
  toggle.addEventListener("click", (e) => {
    e.stopPropagation();
    const isOpen = wrapper.getAttribute("aria-expanded") === "true";
    toggleDropdown(!isOpen);
  });

  // Toggle on keydown (Enter, Space, Arrow)
  wrapper.addEventListener("keydown", (e: KeyboardEvent) => {
    const isOpen = wrapper.getAttribute("aria-expanded") === "true";
    switch (e.key) {
      case "Enter":
      case " ":
        e.preventDefault();
        toggleDropdown(!isOpen);
        break;
      case "ArrowDown":
        e.preventDefault();
        if (!isOpen) toggleDropdown(true);
        else options[0]?.focus();
        break;
      case "Escape":
        e.preventDefault();
        toggleDropdown(false);
        break;
    }
  });

  // Close when clicked outside
  document.addEventListener("click", (e) => {
    if (!wrapper.contains(e.target as Node)) {
      toggleDropdown(false);
    }
  });

  // Mark default selected tier on load
  const selectedTier = toggle.textContent?.trim().toLowerCase();
  options.forEach((option) => {
    const tierSpan = option.querySelector<HTMLElement>(
      `.${this.calculatorID}-custom-dropdown-tier`
    );
    const tierText = tierSpan?.textContent?.trim().toLowerCase();
    if (tierText === selectedTier) {
      option.classList.add("uc-icon-action-checkmark");
    } else {
      option.classList.remove("uc-icon-action-checkmark");
    }
  });
}
